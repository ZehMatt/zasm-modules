#include <cassert>
#include <iostream>
#include <zasm/modules/module.hpp>
#include <zasm/x86/x86.hpp>

static zasm::Error createTestProgram64(zasm::Program& program)
{
    using namespace zasm;

    // Imports.
    auto labelImpMessageBoxA = program.getOrCreateImportLabel("user32.dll", "MessageBoxA");
    auto labelImpExitProcess = program.getOrCreateImportLabel("kernel32.dll", "ExitProcess");

    // Labels.
    auto labelMain = program.createLabel("main");
    auto labelStrMsgTitle = program.createLabel("str_MsgTitle");
    auto labelStrMsg = program.createLabel("str_Msg");

    x86::Assembler a(program);

    // .text
    a.section(".text", Section::Attribs::Code | Section::Attribs::Read | Section::Attribs::Exec);
    {
        // main:
        a.bind(labelMain);
        {
            // .stack_alloc
            a.sub(x86::rsp, Imm(40));

            // invoke user32.MessageBoxA, NULL, labelStrMsgTitle, labelStrMsg, MB_OK
            a.mov(x86::rcx, Imm(0));                          // HWND    hWnd
            a.lea(x86::rdx, x86::qword_ptr(labelStrMsg));     // LPCTSTR lpText
            a.lea(x86::r8, x86::qword_ptr(labelStrMsgTitle)); // LPCTSTR lpCaption,
            a.mov(x86::r9, Imm(0));                           // MB_OK
            a.call(x86::qword_ptr(labelImpMessageBoxA));

            // invoke kernel32.ExitProcess
            a.xor_(x86::rcx, x86::rcx);
            a.call(x86::qword_ptr(labelImpExitProcess));

            // .stack_free
            a.add(x86::rsp, Imm(40));
            a.ret();
        }
    }

    // .rdata
    a.section(".rdata", Section::Attribs::RData | Section::Attribs::Read);
    {
        // str_MsgTitle:
        a.bind(labelStrMsgTitle);
        a.embed("MessageBox Title");

        // str_Msg:
        a.bind(labelStrMsg);
        a.embed("Hello World, this program was generated by zasm and LIEF.");
    }

    // Specify entrypoint.
    program.setEntryPoint(labelMain);

    return Error::None;
}

static zasm::Error buildTestPE64()
{
    using namespace zasm;

    // Generate a new program.
    Program program(zasm::MachineMode::AMD64);
    if (auto err = createTestProgram64(program); err != Error::None)
    {
        return err;
    }

    // Create a new module.
    auto pe64Mod = modules::createModule(modules::ModuleType::PE, program, "test_pe64");
    assert(pe64Mod != nullptr);

    if (auto err = pe64Mod->serialize(); err != Error::None)
    {
        return err;
    }

    std::filesystem::path outputPath("test_pe64.exe");
    if (auto err = pe64Mod->save(outputPath); err != Error::None)
    {
        return err;
    }

    return Error::None;
}

int main()
{
    if (auto err = buildTestPE64(); err != zasm::Error::None)
    {
        std::cout << "Failed to create PE64\n";
        return -1;
    }

    return 0;
}